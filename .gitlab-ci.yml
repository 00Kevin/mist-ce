stages:
  - discover
  - build
  - deploy
  - undeploy
  - release

variables:
  DEPLOY_DOMAIN_SUFFIX: -community.clear.glass


discover submodules:
  stage: discover
  image: alpine
  before_script:
    - apk add --no-cache git
  script:
    - |
        git submodule status | \
          sed 's/^[ +-]\([0-9a-f]*\) \([^ ]*\).*$/\1,\2/' > submodules.csv
  artifacts:
    paths:
      - submodules.csv
    expire_in: 10 days


.docker_image: &docker_image_template
  stage: build
  image: docker:git
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - |
        if [ -n "$EXT_REGISTRY" ]; then
          if [ -n "$EXT_REGISTRY_USER" ] && [ -n "$EXT_REGISTRY_PASSWORD" ]; then
            echo "Will log in to $EXT_REGISTRY."
            docker login -u $EXT_REGISTRY_USER -p $EXT_REGISTRY_PASSWORD $EXT_REGISTRY
          else
            echo "EXT_REGISTRY specified without EXT_REGISTRY_USER & EXT_REGISTRY_PASSWORD"
            /bin/false
          fi
          if [ -z "$EXT_REGISTRY_IMAGE" ]; then
            export EXT_REGISTRY_IMAGE="$EXT_REGISTRY/$CI_PROJECT_NAME"
          fi
        else
          export EXT_REGISTRY_IMAGE=""
        fi
        echo "EXT_REGISTRY_IMAGE=$EXT_REGISTRY_IMAGE"
    - |
        function docker_pull() {
          # docker_pull <img> : Will retry several times to pull image.
          img=$1
          tries=60
          sleep=10
          echo "Will try to pull image $img ($tries tries, ${sleep}s sleep)."
          for i in $(seq 1 $tries); do
            if docker pull $img; then
              echo "Image $img pulled successfully!"
              return 0
            fi
            sleep $sleep
          done
          echo "Failed too pull image $img."
          return 1
        }
    - |
        function docker_push() {
          # docker_push <src> <dest>: Retag and push image
          # <src> must be the full name of a local image.
          # <dest> must be just the image identifier, registry and tag will be
          # added automatically.
          src=$1
          for pref in $CI_REGISTRY_IMAGE $EXT_REGISTRY_IMAGE; do
            for suff in $CI_COMMIT_SHA $CI_COMMIT_REF_SLUG; do
              dest=$pref/$2:$suff
              echo "Tagging image $src as $dest..."
              docker tag $src $dest
              echo "Pushing image $dest..."
              docker push $dest
            done
          done
        }
    - |
        function get_submodule_sha() {
          cat submodules.csv | grep ",$1$" | cut -d, -f1
        }
    - |
        function docker_retag() {
          repo=$1
          img=$2
          src_img="$img:$(get_submodule_sha $repo)"
          docker_pull $src_img
          docker_push $src_img $repo
        }
  dependencies:
    - discover submodules

.retag_mist_image: &retag_image_template
  <<: *docker_image_template
  variables:
    DOCKER_DRIVER: overlay2
    GIT_STRATEGY: none

retag landing:
  <<: *retag_image_template
  script:
    - docker_retag landing mist/landing

retag ui:
  <<: *retag_image_template
  script:
    - docker_retag ui mist/ui

.retag tests:
  <<: *retag_image_template
  script:
    - docker_retag tests mist/tests_base

build api:
  <<: *docker_image_template
  script:
    - SRC_IMG="mist/mist:$(get_submodule_sha api)"
    - docker_pull $SRC_IMG
    - |
        docker build \
          -t $CI_PROJECT_NAME/api:$CI_COMMIT_SHA \
          -f Dockerfile.api \
          --build-arg FROM_IMAGE=$SRC_IMG \
          --build-arg CC_VERSION_SHA=$CI_COMMIT_SHA \
          --build-arg CC_VERSION_NAME=$CI_COMMIT_REF_NAME \
          .
    - docker_push $CI_PROJECT_NAME/api:$CI_COMMIT_SHA api

build nginx:
  <<: *docker_image_template
  script:
    - |
        docker build \
          -t $CI_PROJECT_NAME/nginx:$CI_COMMIT_SHA \
          -f Dockerfile.nginx \
          .
    - docker_push $CI_PROJECT_NAME/nginx:$CI_COMMIT_SHA nginx

compose:
  stage: build
  image: python:alpine
  before_script:
    - pip install docker-compose
    - apk add --no-cache gettext
  script:
    - mkdir -p artifacts
    - |
        if [ -n "$EXT_REGISTRY_IMAGE" ]; then
          export IMG_REGISTRY=$EXT_REGISTRY_IMAGE
        elif [ -n "$EXT_REGISTRY" ]; then
          export IMG_REGISTRY="$EXT_REGISTRY/$CI_PROJECT_NAME"
        else
          export IMG_REGISTRY=$CI_REGISTRY_IMAGE
        fi
    - export IMG_TAG=$CI_COMMIT_REF_SLUG
    - echo "IMG_REGISTRY=$IMG_REGISTRY"
    - echo "IMG_TAG=$IMG_TAG"
    - envsubst < docker-compose.yml > artifacts/docker-compose.yml
  artifacts:
    paths:
      - artifacts/docker-compose.yml
  dependencies: []


.deploy_template: &deploy_template
  stage: deploy
  image: dtzar/helm-kubectl
  script:
    - export name="$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG"
    - export host=$(echo $CI_ENVIRONMENT_URL | sed 's/^https\?:\/\/\(.*\)/\1/')
    - kubectl describe namespace "$name" || kubectl create namespace "$name"
    - |
        export image_secret_name=
        if [[ "$CI_PROJECT_VISIBILITY" != "public" ]]; then
          kubectl create secret --namespace "$name" \
            docker-registry gitlab-registry \
            --docker-server=$CI_REGISTRY \
            --docker-username=${REGISTRY_USER:-$CI_REGISTRY_USER} \
            --docker-password=${REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD} \
            --docker-email=$GITLAB_USER_EMAIL \
            -o yaml --dry-run | \
              kubectl replace --namespace "$name" --force -f -
          export image_secret_name=gitlab-registry
        fi
    - |
        export tls_secret_name=
        if [ -n "$TLS_KEY" ] && [ -n "$TLS_CRT" ]; then
          tls_tmpdir=$(mktemp -d)
          echo "$TLS_KEY" > $tls_tmpdir/tls.key
          echo "$TLS_CRT" > $tls_tmpdir/tls.crt
          kubectl create secret --namespace "$name" \
            tls https \
            --key $tls_tmpdir/tls.key \
            --cert $tls_tmpdir/tls.crt \
            -o yaml --dry-run | \
              kubectl replace --namespace "$name" --force -f -
          export tls_secret_name=https
          rm -rf $tls_tmpdir
        fi
    - |
        helm upgrade --install --namespace "$name" \
          --set image.tag="$CI_COMMIT_SHA" \
          --set image.repository="$CI_REGISTRY_IMAGE" \
          --set image.pullPolicy=IfNotPresent \
          --set image.secrets[0].name="$image_secret_name" \
          --set http.host=$host \
          --set http.tlsSecret=$tls_secret_name \
          --set smtp.password=$SMTP_PASSWORD \
          "$name" ./chart/
  dependencies: []

deploy review:
  <<: *deploy_template
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_COMMIT_REF_SLUG$DEPLOY_DOMAIN_SUFFIX
    on_stop: undeploy review
  except:
    - master

deploy master:
  <<: *deploy_template
  environment:
    name: master
    url: http://master$DEPLOY_DOMAIN_SUFFIX
  only:
    - master


undeploy review:
  stage: undeploy
  image: dtzar/helm-kubectl
  variables:
    GIT_STRATEGY: none
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  script:
    - export name="$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG"
    - helm delete --purge "$name"
    - kubectl delete namespace "$name"
  when: manual
  allow_failure: true
  except:
    - master
  dependencies: []


release:
  stage: release
  image: alpine
  variables:
    GIT_STRATEGY: none
    RELEASE_NOTES: |
      ## Installation

      Download the [docker-compose file]($CI_PROJECT_URL/builds/artifacts/$CI_COMMIT_REF_NAME/raw/artifacts/docker-compose.yml?job=compose),
      save it as `docker-compose.yml` and and run `docker-compose up -d`.

      Also see the [README]($CI_PROJECT_URL/blob/master/README.md) instructions.
  before_script:
    - apk add --no-cache curl jq
  script:
    - API_URL="https://gitlab.com/api/v4/projects/$CI_PROJECT_ID"
    - TAG_URL="$API_URL/repository/tags/$CI_COMMIT_TAG"
    - 'req() { curl -sSLf -H "Private-Token: $GITLAB_API_TOKEN" "$@"; }'
    - |
        if [ "$(req $TAG_URL | jq -r '.release')" = "null" ]; then
          echo "Release doesn't already exist, will create."
          METHOD=POST
        else
          echo "Release already exists, will update."
          METHOD=PUT
        fi
    - req -X $METHOD "$TAG_URL/release" --data-urlencode "description=$RELEASE_NOTES"
    - echo "Successfully updated gitlab release notes."
  only:
    - tags
  dependencies: []
