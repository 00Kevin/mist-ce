variables:
  GET_SOURCES_ATTEMPTS: 3
  DEPLOY_DOMAIN_SUFFIX: -ce.review.mist.io
  TEST_DEPLOY_DOMAIN_SUFFIX: -ce.test.mist.io

  # Possible values are CI_REGISTRY, EXT_REGISTRY, DOCKERHUB
  COMPOSE_REGISTRY: DOCKERHUB
  DEPLOY_REGISTRY: EXT_REGISTRY
  # Set to empty string '' to disable.
  DEPLOY_REGISTRY_AUTH: ''
  # API & UI tests image
  TESTS_IMAGE: $DOCKERHUB_IMAGE/tests:$CI_COMMIT_SHA

stages:
  - discover
  - build
  - deploy
  - test
  - undeploy
  - release


#################### DISCOVER STAGE ####################

discover submodules:
  stage: discover
  image: alpine
  before_script:
    - apk add --no-cache git
  script:
    - |
        git submodule status | \
          sed 's/^[ +-]\([0-9a-f]*\) \([^ ]*\).*$/\1,\2/' > submodules.csv
  artifacts:
    paths:
      - submodules.csv
    expire_in: 10 days
  dependencies: []


#################### BUILD STAGE ####################

.dind_template: &docker_template
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables: &docker_variables
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: "tcp://localhost:2375"
  retry: 2
  before_script:
    # Configure registries.
    - |
        export REGISTRIES=""

        # Login to gitlab docker registry.
        if [ -n "$CI_REGISTRY_IMAGE" ]; then
          echo "Logging in to gitlab registry."
          docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" \
            $CI_REGISTRY
          export REGISTRIES="$REGISTRIES $CI_REGISTRY_IMAGE"
          echo "Logged in to gitlab registry."
        else
          echo "No credentials provided for gitlab registry, skipping."
        fi

        # Login to other registry.
        if [ -n "$EXT_REGISTRY" ] && \
           [ -n "$EXT_REGISTRY_IMAGE" ] && \
           [ -n "$EXT_REGISTRY_USER" ] && \
           [ -n "$EXT_REGISTRY_PASSWORD" ]
        then
          echo "Logging in to $EXT_REGISTRY."
          docker login -u "$EXT_REGISTRY_USER" -p "$EXT_REGISTRY_PASSWORD" \
            "$EXT_REGISTRY"
          export REGISTRIES="$REGISTRIES $EXT_REGISTRY_IMAGE"
          echo "Logged in to $EXT_REGISTRY."
        else
          echo "No credentials provided for external registry, skipping."
        fi

        # Login to dockerhub.
        if [ -n "$DOCKERHUB_IMAGE" ] && \
           [ -n "$DOCKERHUB_USER" ] && \
           [ -n "$DOCKERHUB_PASSWORD" ]
        then
          echo "Logging in to dockerhub."
          docker login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_PASSWORD"
          export REGISTRIES="$REGISTRIES $DOCKERHUB_IMAGE"
          echo "Logged in to dockerhub."
        else
          echo "No credentials provided for dockerhub, skipping."
        fi

        # Check if any registry configured.
        if [ -z "$REGISTRIES" ]; then
          echo "No registries configured, exiting."
          exit 1
        fi
    - |
        function docker_pull() {
          # docker_pull <img> : Will retry several times to pull image.
          img=$1
          tries=60
          sleep=10
          echo "Will try to pull image $img ($tries tries, ${sleep}s sleep)."
          for i in $(seq 1 $tries); do
            if docker pull $img; then
              echo "Image $img pulled successfully!"
              return 0
            fi
            sleep $sleep
          done
          echo "Failed too pull image $img."
          return 1
        }
    - |
        function docker_push() {
          # docker_push <src> <dest>: Retag and push image
          # <src> must be the full name of a local image.
          # <dest> must be just the image identifier, registry and tag will be
          # added automatically.
          tags="$CI_COMMIT_SHA $CI_COMMIT_REF_SLUG"
          if [ "$CI_COMMIT_REF_NAME" = "master" ]; then
            tags="$tags latest"
          fi
          src=$1
          for registry in $REGISTRIES; do
            for tag in $tags; do
              dest="$registry/$2:$tag"
              echo "Tagging image $src as $dest..."
              docker tag $src $dest
              echo "Pushing image $dest..."
              docker push $dest
            done
          done
        }
    - |
        function get_submodule_sha() {
          cat submodules.csv | grep ",$1$" | cut -d, -f1
        }
    - |
        function docker_retag_submodule() {
          repo=$1
          img=$2
          src_img="$img:$(get_submodule_sha $repo)"
          docker_pull $src_img
          docker_push $src_img $repo
        }
  dependencies:
    - discover submodules


build api:
  <<: *docker_template
  script:
    - SRC_IMG="mist/mist:$(get_submodule_sha api)"
    - docker_pull $SRC_IMG
    - |
        docker build \
          -t $CI_PROJECT_NAME/api:$CI_COMMIT_SHA \
          --build-arg FROM_IMAGE=$SRC_IMG \
          --build-arg MIST_VERSION_SHA=$CI_COMMIT_SHA \
          --build-arg MIST_VERSION_NAME=$CI_COMMIT_REF_NAME \
          docker/api
    - docker_push $CI_PROJECT_NAME/api:$CI_COMMIT_SHA api


.docker_build_template: &docker_build_template
  <<: *docker_template
  script:
    - export img=$(echo "$CI_JOB_NAME" | cut -d " " -f2)
    - docker build -t $CI_PROJECT_NAME/$img:$CI_COMMIT_SHA docker/$img
    - docker_push $CI_PROJECT_NAME/$img:$CI_COMMIT_SHA $img
  dependencies: []

build nginx: *docker_build_template
build gocky: *docker_build_template
build logstash: *docker_build_template
build elasticsearch-manage: *docker_build_template


.docker_retag_template: &docker_retag_template
  <<: *docker_template
  variables:
    <<: *docker_variables
    GIT_STRATEGY: none
  script:
    - export submodule=$(echo "$CI_JOB_NAME" | cut -d " " -f2)
    - docker_retag_submodule $submodule mist/$submodule

retag landing: *docker_retag_template
retag ui: *docker_retag_template
retag tests: *docker_retag_template


compose:
  stage: build
  image: python:alpine
  before_script:
    - pip install docker-compose
    - apk add --no-cache gettext
  script:
    - mkdir -p artifacts
    - export IMG_REGISTRY=$(eval \$${COMPOSE_REGISTRY}_IMAGE)
    - echo "IMG_REGISTRY=$IMG_REGISTRY"
    - export IMG_TAG=$CI_COMMIT_REF_SLUG
    - echo "IMG_TAG=$IMG_TAG"
    - envsubst < docker-compose.yml > artifacts/docker-compose.yml
  artifacts:
    paths:
      - artifacts/docker-compose.yml
  dependencies: []



#################### RELEASE STAGE ####################

release: &release_template
  stage: release
  image: python:2.7-alpine
  before_script:
    - apk add --update libmagic openssl
    - pip install requests python-magic
    - wget -O /usr/local/bin/submark https://github.com/dahlia/submark/releases/download/0.2.0/submark-linux-x86_64
    - chmod +x /usr/local/bin/submark
  script:
    - mkdir release
    - sed "s/\$MIST_TAG/$CI_BUILD_REF_SLUG/g" docker-compose.yml > release/docker-compose.yml
    - |
        HEADER=$(sed -n "s/^## \($CI_BUILD_REF_NAME .*\)$/\1/p" CHANGELOG.md)
        submark --omit-heading --h2="$HEADER" /mnt/CHANGELOG.md | \
          sed 's/^### Changes/## Changes/' | \
          tee release.md || true
    - echo >> release.md
    - sed "s/TAG/$CI_BUILD_REF_NAME/g;s/REPO/mist\.io/g" ci/release.md >> release.md
    - ./ci/release.py $RELEASE_ARGS --draft -f release/* -m @release.md mistio mist-ce $CI_BUILD_REF_NAME
  only:
    # only for references that match a version string (v1.2.3)
    - /^v\d+\.\d+\.\d+$/
  except:
    # Except branches, meaning it'll only apply to git tags
    - branches

prerelease:
  <<: *release_template
  variables:
    RELEASE_ARGS: "--prerelease"
  only:
    # only for references that match a prelease version string (v1.2.3-beta)
    - /^v\d+\.\d+\.\d+-.+$/
