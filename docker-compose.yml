# Docker compose definition to run mist.io in production mode, so no mounted
# code, no dev containers etc. Only this single file is required.

version: '2.0'

services:


  influxdb:
    image: influxdb:1.2.2
    ports:
      - 8083:8083
      - 8086:8086
    volumes:
      - influxdb:/var/lib/influxdb


  mongodb:
    image: mongo:3.2
    restart: on-failure:5
    volumes:
      - mongodb:/data/db:rw

  rabbitmq:
    image: rabbitmq:3.6.6-management
    restart: on-failure:5

  memcached:
    image: memcached
    restart: on-failure:5


  elasticsearch:
    image: elasticsearch:5.4.0
    restart: on-failure:5
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data:rw

  logstash:
    image: mist/logstash:$MIST_TAG
    restart: on-failure:5
    depends_on:
      - elasticsearch
      - rabbitmq

  elasticsearch-manage:
    image: mist/elasticsearch-manage:$MIST_TAG
    command: ./scripts/add_templates.py
    restart: on-failure:5
    depends_on:
      - elasticsearch
      - rabbitmq

  kibana:
    image: kibana:5.4.0
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    restart: on-failure:5
    depends_on:
      - elasticsearch


  socat:
    image: mist/docker-socat
    restart: on-failure:5
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw

  mailmock:
    image: mist/mailmock
    restart: on-failure:5


  celery: &backend
    image: mist/mist:io-$MIST_TAG
    depends_on:
      - memcached
      - mongodb
      - elasticsearch
      - rabbitmq
    volumes:
      - ./config:/etc/mist.io
    environment:
      SETTINGS_FILE: /etc/mist.io/settings.py
    stdin_open: true
    tty: true
    restart: on-failure:5
    command: bin/wait-all bin/celery

  scheduler:
    <<: *backend
    command: bin/wait-all bin/scheduler

  poller:
    <<: *backend
    command: bin/wait-all bin/poller

  beat:
    <<: *backend
    command: bin/wait-all bin/beat

  hubshell:
    <<: *backend
    command: bin/wait-all bin/hubshell

  api:
    <<: *backend
    command: bin/wait-all bin/uwsgi
    expose:
      - 80

  sockjs:
    <<: *backend
    command: bin/wait-all bin/sockjs
    expose:
      - 8081


  ui:
    image: mist/ui:io-$MIST_TAG
    command: sh /entry.sh
    stdin_open: true
    tty: true
    restart: on-failure:5
    expose:
      - 80

  landing:
    image: mist/landing:io-$MIST_TAG
    command: sh /entry.sh
    stdin_open: true
    tty: true
    restart: on-failure:5
    expose:
      - 80


  nginx:
    image: mist/nginx:$MIST_TAG
    restart: on-failure:5
    ports:
      - 80:80
    depends_on:
      - api
      - sockjs
      - landing
      - ui


  beringei:
    image: gcr.io/mist-ops/beringei:plain
    command: "./beringei/service/beringei_main -beringei_configuration_path /etc/beringei/beringei.json -create_directories -sleep_between_bucket_finalization_secs 60 -allowed_timestamp_behind 300 -bucket_size 600 -buckets 144 -logtostderr -v=2"
    hostname: beringei
    ports:
      - 9999:9999
    volumes:
      - ./beringei-config:/etc/beringei

  beringei-http:
    image: gcr.io/mist-ops/beringei:plain
    command: ./beringei/tools/plain_text_service/beringei_plain_text_service -beringei_configuration_path /etc/beringei/beringei.json -ip 0.0.0.0 -http_port 9990
    ports:
      - 9990:9990
    volumes:
      - ./beringei-config:/etc/beringei
    depends_on:
      - beringei

  gocky:
    image: gcr.io/mist-ops/gocky:v0.5
    command: /gocky -config /etc/gocky/config.toml
    ports:
      - 9096:9096
      - 9097:9097
    volumes:
      - ./gocky-config:/etc/gocky
    depends_on:
      - beringei
      - beringei-http
      - rabbitmq

  traefik:
    image: traefik
    command: --web --logLevel=DEBUG
    ports:
      - 8040:80
      - 8041:8080


volumes:
  elasticsearch: {}
  influxdb: {}
  mongodb: {}
